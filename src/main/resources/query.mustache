{{#packageName}}
package {{packageName}};
{{/packageName}}

import com.kentchiu.spring.attribute.AttributeInfo;
import com.kentchiu.spring.base.domain.Option;
import org.hibernate.validator.constraints.*;
import org.hibernate.annotations.GenericGenerator;
import org.hibernate.annotations.NotFound;
import org.hibernate.annotations.NotFoundAction;
import javax.persistence.*;
import javax.validation.constraints.*;
import java.util.Date;
import java.math.BigDecimal;
import org.torpedoquery.jpa.OnGoingLogicalCondition;
import org.torpedoquery.jpa.Query;
import static org.torpedoquery.jpa.Torpedo.*;
import java.util.ArrayList;
import java.util.List;
import org.apache.commons.lang3.StringUtils;
import com.kentchiu.spring.base.service.query.PageableQuery;
{{#imports}}
import {{import}};
{{/imports}}


/**
 * {{table.comment}}
 */
public class {{Domain}}Query {{{extend}}}{
    // **************************************************************************************
    // PLEASE NOTE THAT : 有需要用到的property再 uncomment，儘可能的讓 working properties 愈少愈好
    // **************************************************************************************
{{{properties}}}

    public Query<{{Domain}}> buildQuery() {
        {{Domain}} from = from({{Domain}}.class);
        List<OnGoingLogicalCondition> conditions = new ArrayList<>();
{{#extraParams.enableFilter}}
        conditions.addAll(super.buildQuery(from));
{{/extraParams.enableFilter}}

{{#masterDomain}}
        if (StringUtils.isNotBlank({{masterDomain}}Uuid)) {
            conditions.add(condition(from.get{{MasterDomain}}().getUuid()).eq({{masterDomain}}Uuid));
        }
{{/masterDomain}}

//        if (StringUtils.isNotBlank(__ref__Uuid)) {
//            conditions.add(condition(from.get__Ref__().getUuid()).eq(__ref__Uuid));
//        }

        if (!conditions.isEmpty()) {
            where(and(conditions));
        }

        // sorting
        setDefaultSort("uuid");
        sorting(from);

        return select(from);
    }

    @Override
    protected Function<Object> buildOrder(Object from, String property, Sort.Direction direction) {
        Customer domain = (Customer) from;
        switch (property) {
            case "modifiedDate":
                return order(domain.getModifiedDate(), direction);
            case "no":
                return order(domain.getNo(), direction);
            case "cardNo":
                return order(domain.getCardNo(), direction);
            case "name":
                return order(domain.getName(), direction);
            case "qq":
                return order(domain.getQq(), direction);
            default:
                return null;
        }
    }

}
