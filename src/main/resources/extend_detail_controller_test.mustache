package {{topPackage}}.{{moduleName}}.web;

import {{topPackage}}.base.web.AbstractControllerTest;
import {{topPackage}}.{{moduleName}}.domain.{{MasterDomain}};
import {{topPackage}}.{{moduleName}}.domain.{{DetailDomain}};
import {{topPackage}}.{{moduleName}}.domain.{{extendDetailDomain}};
import {{topPackage}}.{{moduleName}}.domain.{{masterDomainPlural}};
import {{topPackage}}.{{moduleName}}.domain.{{DetailDomainPlural}};
import {{topPackage}}.{{moduleName}}.domain.{{extendDetailDomainPlural}};
import {{topPackage}}.{{moduleName}}.service.{{MasterDomain}}Service;
import {{topPackage}}.{{moduleName}}.service.{{DetailDomain}}Service;
import {{topPackage}}.{{moduleName}}.service.{{extendDetailDomain}}Service;
import {{topPackage}}.{{moduleName}}.service.query.{{DetailDomain}}Query;
import {{topPackage}}.{{moduleName}}.web.dto.{{DetailDomain}}Input;
import {{topPackage}}.{{moduleName}}.web.dto.{{DetailDomain}}UpdateInput;

import com.google.common.collect.Maps;
import com.kentchiu.spring.base.domain.DomainUtil;
import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;

import java.util.Map;
import java.util.Optional;

import static org.mockito.Matchers.any;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;


@ContextConfiguration(classes = {TestConfig.class})
public class {{Domain}}ControllerTest extends AbstractControllerTest {

    private String {{masterName}}Uuid;
    private String {{detailName}}Uuid;

    @Autowired
    private {{Domain}}Service mockService;
    @Autowired
    private {{MasterDomain}}Service mock{{MasterDomain}}Service;
    @Autowired
    private {{DetailDomain}}Service mock{{DetailDomain}}Service;


    @Override
    @Before
    public void setUp() throws Exception {
        super.setUp();
        reset(mockService);
        reset(mock{{MasterDomain}}Service);
        reset(mock{{DetailDomain}}Service);
        {{MasterDomain}} {{masterName}} = {{masterDomainPlural}}.all().get(0);
        {{DetailDomain}} {{detailName}} = {{DetailDomainPlural}}.all().get(0);
        {{masterName}}Uuid = {{masterName}}.getUuid();
        {{detailName}}Uuid = {{detailName}}.getUuid();
        when(mock{{MasterDomain}}Service.findOne({{masterName}}Uuid)).thenReturn(Optional.of({{masterName}}));
        when(mock{{DetailDomain}}Service.findOne({{detailName}}Uuid)).thenReturn(Optional.of({{detailName}}));
    }

    @Test
    public void testList{{extendDetailDomainPlural}}() throws Exception {
        when(mockService.findAll(any({{extendDetailDomain}}Query.class))).thenReturn({{extendDetailDomainPlural}}.page(3));

        MockHttpServletRequestBuilder requestBuilder = get("/{{masterNamePlural}}/" + {{masterName}}Uuid + "/{{detailNamePlural}}/" + {{detailName}}Uuid + "/{{extendDetailNamePlural}}")
                .contentType(MediaType.APPLICATION_JSON);

        mockMvc.perform(requestBuilder)
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.totalElements").value(Matchers.greaterThan(1)));
    }


    @Ignore("Don't ignore this, make it GREEN BAR instead")
    @Test
    public void testAdd{{extendDetailDomain}}() throws Exception {
        Map<String, String> input = Maps.newLinkedHashMap();
        input.put("status", "2");

        String json = DomainUtil.toJson(input);

        MockHttpServletRequestBuilder requestBuilder = post("/{{masterNamePlural}}/" + {{masterName}}Uuid + "/{{detailNamePlural}}/" + {{detailName}}Uuid + "/{{extendDetailNamePlural}}")
                .contentType(MediaType.APPLICATION_JSON)
                .content(json);

        mockMvc.perform(requestBuilder)
                .andExpect(status().is(HttpStatus.CREATED.value()))
                .andExpect(jsonPath("$.status").value("2"));

        verify(mockService).add(Mockito.any({{Domain}}.class));
    }

    @Test
    public void testGet{{extendDetailDomain}}() throws Exception {
        {{extendDetailDomain}} {{extendDetailName}} = {{extendDetailDomainPlural}}.all().get(0);
        String uuid = {{extendDetailName}}.getUuid();
        when(mockService.findOne(uuid)).thenReturn(Optional.of({{extendDetailName}}));

        MockHttpServletRequestBuilder requestBuilder = get("/{{masterNamePlural}}/" + {{masterName}}Uuid + "/{{detailNamePlural}}/" + {{detailName}}Uuid + "/{{extendDetailNamePlural}}/" + uuid)
                .contentType(MediaType.APPLICATION_JSON);

        mockMvc.perform(requestBuilder)
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.uuid").exists());
    }


    @Ignore("Don't ignore this, make it GREEN BAR instead")
    @Test
    public void testUpdate{{extendDetailDomain}}() throws Exception {
        {{extendDetailDomain}} {{extendDetailName}} = {{extendDetailDomainPlural}}.all().get(0);
        String uuid = {{extendDetailName}}.getUuid();

        Map<String, String> input = Maps.newLinkedHashMap();
        input.put("name", "name_new");

        String json = DomainUtil.toJson(input);

        when(mockService.findOne(uuid)).thenReturn(Optional.of({{extendDetailName}}));

        MockHttpServletRequestBuilder requestBuilder = patch("/{{masterNamePlural}}/" + {{masterName}}Uuid + "/{{detailNamePlural}}/" + {{detailName}}Uuid  + "/{{extendDetailNamePlural}}/" + uuid)
                .contentType(MediaType.APPLICATION_JSON)
                .content(json);

        mockMvc.perform(requestBuilder)
                .andExpect(status().is(HttpStatus.OK.value()))
                .andExpect(jsonPath("$.name").value("name_new"));

        verify(mockService).update(any({{Domain}}.class));
    }


    @Test
    public void testDelete{{extendDetailDomain}}() throws Exception {
        {{extendDetailDomain}} {{extendDetailName}} = {{extendDetailDomainPlural}}.all().get(0);
        String uuid = {{extendDetailName}}.getUuid();

        MockHttpServletRequestBuilder requestBuilder = delete("/{{masterNamePlural}}/" + {{masterName}}Uuid + "/{{detailNamePlural}}/" + {{detailName}}Uuid  + "/{{extendDetailNamePlural}}/" + uuid)
                .contentType(MediaType.APPLICATION_JSON);

        mockMvc.perform(requestBuilder)
                .andExpect(status().is(HttpStatus.NO_CONTENT.value()));

        verify(mockService).delete(uuid);
    }

}