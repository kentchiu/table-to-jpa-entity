package {{topPackage}}.{{moduleName}}.web;

import {{topPackage}}.base.web.AbstractController;
import {{topPackage}}.{{moduleName}}.domain.{{Domain}};
import {{topPackage}}.{{moduleName}}.service.{{Domain}}Service;
import {{topPackage}}.{{moduleName}}.service.query.{{Domain}}Query;
import {{topPackage}}.{{moduleName}}.web.dto.{{Domain}}Input;
import {{topPackage}}.{{moduleName}}.web.dto.{{Domain}}UpdateInput;
import {{topPackage}}.{{moduleName}}.web.AbstractController;

import com.kentchiu.spring.base.domain.DomainUtil;
import com.kentchiu.spring.base.domain.ResourceNotFoundException;
import com.kentchiu.spring.base.domain.Validators;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.http.HttpStatus;
import org.springframework.validation.BindException;
import org.springframework.web.bind.annotation.*;
import javax.validation.Valid;


@RestController
@RequestMapping("/{{domainPlural}}")
public class {{Domain}}Controller extends AbstractController {

    private {{Domain}}Service service;

    @Autowired
    public void setService({{Domain}}Service service) {
        this.service = service;
    }

    @RequestMapping(method = RequestMethod.GET)
    public Page<{{Domain}}> list{{DomainPlural}}(@Valid {{Domain}}Query query) {
{{#extraParams.enableFilter}}
        setFilter(query);
{{/extraParams.enableFilter}}
        return service.findAll(query);
    }


    @ResponseStatus(HttpStatus.CREATED)
    @RequestMapping(method = RequestMethod.POST)
    public {{Domain}} add{{Domain}}(@Valid @RequestBody {{Domain}}Input input) throws BindException {
        {{Domain}} {{domain}} = new {{Domain}}();
        DomainUtil.copyNotNullProperties(input, {{domain}});

        // FIXME add references if need
        // if (StringUtils.isNotBlank(input.getXxxUuid())) {
        //     Xxx xxx = xxxService.findOne(input.getXxxUuid()).orElseThrow(() -> new ResourceNotFoundException(Xxx.class, input.getXxxUuid()));
        //     {{domain}}.setXxx(xxx);
        // }

        BindException exception = new BindException({{domain}}, {{domain}}.getClass().getSimpleName());
        Validators.validateBean(exception, {{domain}});

        if (exception.hasErrors()) {
            throw exception;
        }

        service.add({{domain}});
        return {{domain}};
    }


    @RequestMapping(value = "/{uuid}", method = RequestMethod.GET)
    public {{Domain}} get{{Domain}}(@PathVariable String uuid) {
        return service.findOne(uuid).orElseThrow(() -> new ResourceNotFoundException({{Domain}}.class, uuid));
    }

    @RequestMapping(value = "/{uuid}", method = RequestMethod.PATCH)
    public {{Domain}} update{{Domain}}(@PathVariable String uuid, @Valid @RequestBody {{Domain}}UpdateInput input) throws BindException {
        {{Domain}} {{domain}} = service.findOne(uuid).orElseThrow(() -> new ResourceNotFoundException({{Domain}}.class, uuid));

        DomainUtil.copyNotNullProperties(input, {{domain}});

        // FIXME add references if need
        // if (StringUtils.isNotBlank(input.getXxxUuid())) {
        //     Xxx xxx = xxxService.findOne(input.getXxxUuid()).orElseThrow(() -> new ResourceNotFoundException(Xxx.class, input.getXxxUuid()));
        //     {{domain}}.setXxx(xxx);
        // }


        BindException exception = new BindException({{domain}}, {{domain}}.getClass().getSimpleName());
        Validators.validateBean(exception, {{domain}});

        if (exception.hasErrors()) {
            throw exception;
        }

        service.update({{domain}});
        return {{domain}};
    }

    @ResponseStatus(HttpStatus.NO_CONTENT)
    @RequestMapping(value = "/{uuid}", method = RequestMethod.DELETE)
    public void delete{{Domain}}(@PathVariable String uuid) {
        service.delete(uuid);
    }


}



